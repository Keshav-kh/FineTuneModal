# -*- coding: utf-8 -*-
"""CatsandDogs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tN4BjIL-uZbqJC5i77zsWkxFSx7R3kW2

## Loading data
"""

!wget --no-check-certificate \
    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \
    -O /tmp/cats_and_dogs_filtered.zip

import os
import zipfile

local_zip = '/tmp/cats_and_dogs_filtered.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/cats_and_dogs_filtered'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')

"""## Reading the Data into arrays"""

from PIL import Image
import numpy as np

cats_dir = os.path.join(train_dir, "cats")
dogs_dir = os.path.join(train_dir, "dogs")

# Initialize as lists
x_train = []
y_train = []
NUMBER_OF_EXAMPLES = 1000

i = 0
while i < NUMBER_OF_EXAMPLES:
    if i % 2 == 0:
        im = Image.open(os.path.join(cats_dir, os.listdir(cats_dir)[i])).convert("RGB")
        im_resized = im.resize((150, 150))
        x_train.append(np.array(im_resized))
        y_train.append(1)
    else:
        im = Image.open(os.path.join(dogs_dir, os.listdir(dogs_dir)[i])).convert("RGB")
        im_resized = im.resize((150, 150))
        x_train.append(np.array(im_resized))
        y_train.append(0)
    i += 1

# Convert lists to NumPy arrays
x_train = np.array(x_train)
y_train = np.array(y_train)

"""## Beginning to define the model (this is where you come in, I loaded the pretrained model for you)"""

import tensorflow as tf
from tensorflow.keras import layers, models

pretrained_model = tf.keras.applications.ResNet50(
    include_top=False,
    input_shape=(150, 150, 3),
    pooling='avg',
    weights='imagenet'
)

# Freeze the convolutional base
pretrained_model.trainable = False

# Add custom layers on top
model = models.Sequential()
model.add(pretrained_model)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer=tf.keras.optimizers.RMSprop(learning_rate=2e-5),
              metrics=['accuracy'])

history = model.fit(
    x_train, y_train,
    epochs=5,
    batch_size=32,
    validation_split=0.2
)

loss, accuracy = model.evaluate(x_train, y_train)
print(f'Validation accuracy: {accuracy}')

import numpy as np
from tensorflow.keras.preprocessing import image
from google.colab import files



from google.colab import drive
drive.mount('/content/drive')
img_path = '/content/drive/My Drive/path_to_your_image/dog.jpg.png'

# Load an image for prediction
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array /= 255.

# Make a prediction
prediction = model.predict(img_array)
print('Cat' if prediction < 0.5 else 'Dog')